!<arch>
0-isupper.c/    0           0     0     644     0         `
0-memset.c/     0           0     0     644     0         `
0-strcat.c/     0           0     0     644     0         `
100-atoi.c/     0           0     0     644     0         `
1-isdigit.c/    0           0     0     644     0         `
1-memcpy.c/     0           0     0     644     0         `
1-strncat.c/    0           0     0     644     0         `
2-strchr.c/     0           0     0     644     0         `
2-strlen.c/     0           0     0     644     0         `
2-strncpy.c/    0           0     0     644     0         `
3-islower.c/    0           0     0     644     0         `
3-puts.c/       0           0     0     644     0         `
3-strcmp.c/     0           0     0     644     0         `
3-strspn.c/     0           0     0     644     0         `
4-isalpha.c/    0           0     0     644     0         `
4-strpbrk.c/    0           0     0     644     0         `
5-strstr.c/     0           0     0     644     410       `
#include "main.h"

/**
* _strstr - Locating a substring
*
* @needle: Occurance to find
*
* @haystack: String to search
*
* Return: Pointer
*/

char *_strstr(char *haystack, char *needle)
{
	while (*haystack)
	{
		char *src = haystack;
		char *sub = needle;

		while (*haystack && *sub && *haystack == *sub)
		{
			haystack++;
			sub++;
		}
		if (!*sub)
			return (src);
		haystack = src + 1;
	}
	return (0);
}
6-abs.c/        0           0     0     644     212       `
#include "main.h"

/**
* _abs - COmputes the absolute value of an integer
*
* @a: The integer to be computed
*
* Return: Absolute value
*/

int _abs(int a)
{
	if (a >= 0)
		return (a);
	else
		return (a * -1);
}
9-strcpy.c/     0           0     0     644     332       `
#include "main.h"

/**
* _strcpy - Copy strings from source arr to destination arr
*
* @dest: destination array
* @src: source array
*
* Return: Pointer to destination array
*/

char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i] != '\0')
	{
		*(dest + i) = src[i];
		i++;
	}

	*(dest + i) = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     245       `
#include <unistd.h>

/**
* _putchar - Write the character c to stdout
*
* @c: The character to print
*
* Return: On success 1.
*
* On error, -1 is returned, and errno is set appropriately.
*/

int _putchar(char c)
{
	return (write(1, &c, 1));
}

